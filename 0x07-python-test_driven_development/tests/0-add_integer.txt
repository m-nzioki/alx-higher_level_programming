# Using 0-add_integer.py

This module defines an integer addition function `add_integer(a, b=98)`

USAGE

Returns the addition of two integer arguments.

----
----

>>>add_integer=__import__('0-add_integer').add_integer
>>>add_integer(2, 2)
4

>>>add_integer(1, -4)
-3

Also works with floating-point values
Floats are casted into ints before the addition is performed

>>>add_integer(4.1, 3.9)
8

>>>add_integer(1.1, -2.6)
-1

>>>add_integer(2.3, 4)
6

The second argument is optional. The default is set to 98

>>>add_integer(1)
99

----
Non-numbers
----

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

>>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer


>>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

 >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

  >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

  >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

----
----

The function will fail if infinity is provided and or if NaN numbers are provided

>>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integ

  >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
